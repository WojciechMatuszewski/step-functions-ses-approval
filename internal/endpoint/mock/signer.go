// Code generated by MockGen. DO NOT EDIT.
// Source: ../signeriface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockSigner is a mock of Signer interface
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// Presign mocks base method
func (m *MockSigner) Presign(r *http.Request, body io.ReadSeeker, service, region string, exp time.Duration, signTime time.Time) (http.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Presign", r, body, service, region, exp, signTime)
	ret0, _ := ret[0].(http.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Presign indicates an expected call of Presign
func (mr *MockSignerMockRecorder) Presign(r, body, service, region, exp, signTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Presign", reflect.TypeOf((*MockSigner)(nil).Presign), r, body, service, region, exp, signTime)
}
