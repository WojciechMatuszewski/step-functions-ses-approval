// Code generated by MockGen. DO NOT EDIT.
// Source: ../judge.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMachineNotifier is a mock of MachineNotifier interface
type MockMachineNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockMachineNotifierMockRecorder
}

// MockMachineNotifierMockRecorder is the mock recorder for MockMachineNotifier
type MockMachineNotifierMockRecorder struct {
	mock *MockMachineNotifier
}

// NewMockMachineNotifier creates a new mock instance
func NewMockMachineNotifier(ctrl *gomock.Controller) *MockMachineNotifier {
	mock := &MockMachineNotifier{ctrl: ctrl}
	mock.recorder = &MockMachineNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachineNotifier) EXPECT() *MockMachineNotifierMockRecorder {
	return m.recorder
}

// NotifySuccess mocks base method
func (m *MockMachineNotifier) NotifySuccess(ctx context.Context, output, taskToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifySuccess", ctx, output, taskToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifySuccess indicates an expected call of NotifySuccess
func (mr *MockMachineNotifierMockRecorder) NotifySuccess(ctx, output, taskToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySuccess", reflect.TypeOf((*MockMachineNotifier)(nil).NotifySuccess), ctx, output, taskToken)
}

// NotifyFailure mocks base method
func (m *MockMachineNotifier) NotifyFailure(ctx context.Context, cause, outError, taskToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyFailure", ctx, cause, outError, taskToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyFailure indicates an expected call of NotifyFailure
func (mr *MockMachineNotifierMockRecorder) NotifyFailure(ctx, cause, outError, taskToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyFailure", reflect.TypeOf((*MockMachineNotifier)(nil).NotifyFailure), ctx, cause, outError, taskToken)
}
